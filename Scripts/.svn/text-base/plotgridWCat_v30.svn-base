#!/bin/tcsh -f
#need to know absolute start-time, plot current time and best location in lat lon
#removed NEIC table lookup
#makecpt -Cjet -Qi -T-8/-5/1 -Z > amp2.cpt
#makecpt -Cjet -Qi -T-8/-3/1 -Z -D > amp2.cpt
makecpt -Cjet -Qi -T-8.5/-5/1 -Z > amp2.cpt
alias calc 'nawk "BEGIN{ print \!* }" '
alias roundint 'nawk "BEGIN{ print int( \!* ) + 1 }" '
alias truncint 'nawk "BEGIN{ print int( \!* ) }" '

# Calibrationvalues
set v30_A0 = -1.363541e+01
set v30_A1 =  1.280498e+00
set v60_A0 = -1.390322e+01
set v60_A1 = 1.336573e+00
set v100_A0 = -1.425351e+01
set v100_A1 = 1.343207e+00
set d100_A0 = -1.384989e+01
set d100_A1 = 1.358300e+00

set ANNOT_FONT_SECONDARY = Courier
set HEADER_FONT = Courier
set LABEL_FONT = Courier
set slice = 30
set minamp = 0.2
set minmag = 5.0
#create cpt file within script

# calculate absolute time of particular slice of current xyz file
# for test
set startdattimWaveforms = `head -2 $2 | tail -1`
set timeslice = `head -3 $1 | tail -1 | awk '{print $2}'`
echo startdattimWaveforms $startdattimWaveforms timeslice $timeslice
set t = `translatetime.pl $startdattimWaveforms $timeslice`
set date = $t[1]
set time = $t[2]
echo date= $date  time=$time

# calculate range of times in stacked magnitude time series
# need to read duration from o_timefile eventually
set hlinestor = `head -1 $1`
set headerlines = `head -1 $2`
set delay = `awk 'NR>(hl+1) {print $2}' hl=$headerlines $2 | head -1`
set t = `translatetime.pl $startdattimWaveforms $delay`
set startdattimStack = $t[3]
set enddelay = `tail -1 $2 | awk '{print $2}'`
set t = `translatetime.pl $startdattimWaveforms $enddelay`
set enddattimStack = $t[3]
set R1 = `translatetimeGMT.pl $startdattimStack`
set R2 = `translatetimeGMT.pl $enddattimStack`
echo $R1 $R2

# want annotated tick marks for time along trace
set hours = `calc ($enddelay - $delay)/(3600)`
set days = `calc ($enddelay - $delay)/86400`
set tothours = `truncint ($enddelay - $delay)/(3600)`
echo ticks are $hours $days
set trouhours = `roundint ($enddelay - $delay)/(3600*5)`
set troudays = `roundint ($enddelay - $delay)/86400`
set trunhours = `truncint ($enddelay - $delay)/(3600*5)`
set trundays = `truncint ($enddelay - $delay)/86400`
echo round are $trouhours $troudays
echo truncated are $trunhours $trundays
# assume here that the locator will not be run for time less than a few hours or more than a few days
# else the ticks will need to be updated accordingly
if ($trundays == "0") then
#need to have at least one day marked along entire trace
        echo days is zero
        set tickdays = 1D
	gmtset TIME_INTERVAL_FRACTION 0.05
else
#mark each separate day
        echo days is not zero
        set tickdays = 1D
endif
if ($trunhours == "0") then
        set tickhours =  15M
        set ftickhours =  5M
else
        set tickhours = "$trouhours"H
        set ftickhours = 1H
endif
echo ticks are $tickhours $tickdays
echo timeslice = $timeslice mamp = $minmag
set loc = `awk '( ($2<tm+1) && ($2>tm-1) ) && $8>= mamp {print $3,$4}' tm=$timeslice mamp=$minmag $2`
echo original = $loc
set locr = `awk '( ($2<tm+1) && ($2>tm-1) ) && $8>= mamp {printf "%6.1f %5.1f", $3,$4}' tm=$timeslice mamp=$minmag $2`
set lonr = $locr[1]
set latr = $locr[2]
echo latr = $latr  lonr = $lonr

@ thtor = $hlinestor + 1
echo thtor = $thtor
nearneighbor $1 -R-180/180/-90/90 -H$thtor -I1 -Ggrid.$timeslice.grd -S120k
psbasemap -JA120/0/4i -R0/360/-90/90 -B30 -P -K -X0.15 -Y7.00  >grid.$timeslice.ps
grdimage grid.$timeslice.grd -R -JA -Camp2.cpt -O -K >>grid.$timeslice.ps
gmtset GRID_PEN 0.3p/150/150/150
pscoast -A5000 -Dl -N1/1/255 -JA -R -Bg60/g30 -W1/255 -O -K >>grid.$timeslice.ps
gmtset GRID_PEN 0.1p
#plot location of maximum stacked amplitude if the amplitude is greater than boundary value
#print error message if not available
#column number 8 is magnitude, column 5 is stacked amplitude (as used in tor-file)
awk '( ($2<tm+1) && ($2>tm-1) ) && $8>= mamp {print $3,$4}' tm=$timeslice mamp=$minmag $2 | psxy -R -JA -Sc0.05 -G0/0/0       -V -O -K -W1/149/135/255 >> grid.$timeslice.ps
psbasemap -JA-60/0/4i -R0/360/-90/90  -B30 -O -K -X4.01  >>grid.$timeslice.ps
grdimage grid.$timeslice.grd -R -JA -Camp2.cpt -O -K >>grid.$timeslice.ps
gmtset GRID_PEN 0.3p/150/150/150
pscoast -A5000 -Dl -N1/1/255 -JA -R -W1/255 -Bg60/g30 -O -K  >>grid.$timeslice.ps
gmtset GRID_PEN 0.1p
awk '( ($2<tm+1) && ($2>tm-1) ) && $8>= mamp {print $3,$4}' tm=$timeslice mamp=$minmag $2 | psxy -R -JA -Sc0.05 -G0/0/0       -V -O -K -W1/149/135/255 >> grid.$timeslice.ps
echo "row 2"
psbasemap -JA0/89/4i -R0/360/-90/90  -B30 -O -K -X-4.01 -Y-4.01 >>grid.$timeslice.ps
grdimage grid.$timeslice.grd -R -JA -Camp2.cpt -O -K >>grid.$timeslice.ps
gmtset GRID_PEN 0.3p/150/150/150
pscoast -A5000 -Dl -N1/1/255 -JA -R -W1/255 -Bg60/g30 -O -K >>grid.$timeslice.ps
gmtset GRID_PEN 0.1p
awk '( ($2<tm+1) && ($2>tm-1) ) && $8>= mamp {print $3,$4}' tm=$timeslice mamp=$minmag $2 | psxy -R -JA -Sc0.05 -G0/0/0       -V -O -K -W1/149/135/255 >> grid.$timeslice.ps
psbasemap -JA0/-89/4i -R0/360/-90/90  -B30 -O -K -X4.01  >>grid.$timeslice.ps
grdimage grid.$timeslice.grd -R -JA -Camp2.cpt -O -K >>grid.$timeslice.ps
gmtset GRID_PEN 0.3p/150/150/150
pscoast -A5000 -Dl -N1/1/255 -JA -R -W1/255 -Bg60/g30 -O -K >>grid.$timeslice.ps
gmtset GRID_PEN 0.1p
awk '( ($2<tm+1) && ($2>tm-1) ) && $8>= mamp {print $3,$4}' tm=$timeslice mamp=$minmag $2 | psxy -R -JA -Sc0.05 -G0/0/0       -V -O -K -W1/149/135/255 >> grid.$timeslice.ps

set maxtime = `awk 'NR>(hl+1) {print $2/3600}' hl=$headerlines $2 | minmax -C | awk '{print $2}'`
set mintime = `awk 'NR>(hl+1) {print $2/3600}' hl=$headerlines $2 | minmax -C | awk '{print $1}'`
set maxamp = `awk 'NR>(hl+1) {print $8}' hl=$headerlines $2 | minmax -C | awk '{print $2}'`
set minamp = `awk 'NR>(hl+1) {print $8}' hl=$headerlines $2 | minmax -C | awk '{print $1}'`

set minamp = 5.0
set maxamp = 9.0

echo plotboundaries $mintime $maxtime $minamp $maxamp
gmtset ANNOT_FONT_PRIMARY = Palatino-Roman
gmtset ANNOT_FONT_SIZE_PRIMARY = 10p
gmtset ANNOT_FONT_SECONDARY = Palatino-Roman
gmtset ANNOT_FONT_SIZE_SECONDARY = 12p
gmtset LABEL_FONT = Palatino-Roman
gmtset LABEL_FONT_SIZE = 10p
gmtset PLOT_CLOCK_FORMAT hh:mm 
gmtset PLOT_DATE_FORMAT "o dd y"
psbasemap -R$R1/$R2/$minamp/$maxamp -JX6.75/2 -Bpa"$tickhours"f"$ftickhours"Sn -Bsa"$tickdays"S -O -K -V  -X-3.51 -Y-2.1 >> grid.$timeslice.ps 
#awk 'NR>(hl+1) {print $2/3600,$8}' hl=$headerlines $2 | psxy -R$mintime/$maxtime/$minamp/$maxamp -Ba1f1/f1a0.5g1:"Stacked Magnitude":WE -W3/0/0/205 -H1 -JX  -M -V -O -K >> grid.$timeslice.ps
awk '$5>=5.0{print $1,$5}' /home/polet/Locator/MagCalib/cat_upd.txt.gmt | psxy -R$R1/$R2/4.5/9.25 -Ba1f1/f0.2a1g1:"Magnitude":WE -Sc0.08i -W1/250/0/0 -JX -O -K -V >> grid.$timeslice.ps
nawk 'NR>(hl+1) {print $2/3600,(log($5)/log(10))/slope - interc/slope}' hl=$headerlines slope=$v30_A1 interc=$v30_A0 $2 | psxy -R$mintime/$maxtime/4.5/9.25 -W3/0/0/205 -JX  -M -H1  -V -O -K >> grid.$timeslice.ps
awk '$5>=5.0{print $1,$5}' /home/polet/Locator/MagCalib/cat_upd.txt.gmt | psxy -R$R1/$R2/4.5/9.25 -Sc0.08i -W1/250/0/0 -JX -O -K -V >> grid.$timeslice.ps

echo timeslice is $timeslice
set magnow = `awk '( ($2<tm+1) && ($2>tm-1) ){print (log($5)/log(10))/slope - interc/slope+0.2}' slope=$v30_A1 interc=$v30_A0 tm=$timeslice $2 `
set maground = `awk '( ($2<tm+1) && ($2>tm-1) ){printf "%3.1f", (log($5)/log(10))/slope - interc/slope}' slope=$v30_A1 interc=$v30_A0 tm=$timeslice $2 `
set timenow = `awk '( ($2<tm+1) && ($2>tm-1) ){print $2/3600}' tm=$timeslice $2 `
echo mag is $magnow maground is $maground
awk '( ($2<tm+1) && ($2>tm-1) ){print $2/3600,(log($5)/log(10))/slope - interc/slope+.1}' slope=$v30_A1 interc=$v30_A0 tm=$timeslice $2 | psxy -R$mintime/$maxtime/4.5/9.25 -JX -Si0.1 -G200/0/0 -W1/200/0/0 -V -O -K >> grid.$timeslice.ps
echo $timenow $magnow 12 0 9 BC $maground
pstext -N -R -JX -O -K << END >> grid.$timeslice.ps
$timenow $magnow 8 0 4 BC $maground
END

set tsl = `expr $timeslice + 0`

#1,1 is now at original origin, so 5,5 is in center of four spheres
pstext -R1/20/1/20 -Jx1/1 -O -X-0.5 -Y2.1 << END >> grid.$timeslice.ps
5. 5.2 12 0 9 CM $date $time
5. 5.0 12 0 9 CM M=$maground
4.2 4.8 12 0 9 CM lat:
#4.9 4.8 12 0 9 RM +88.8
4.9 4.8 12 0 9 RM $latr
5.2 4.8 12 0 9 CM lon:
#6.0 4.8 12 0 9 RM -188.8
6.0 4.8 12 0 9 RM $lonr
END

echo "convert to ppm"
#gs -sPAPERSIZE=legal -sDEVICE=ppmraw -r72 -q -dNOPAUSE -sOutputFile=grid.$tsl.ppm -- grid.$timeslice.ps
#pnmquant 256 grid.$tsl.ppm | ppmtogif  > grid.$tsl.gif



en dit is de versie met alle periods

#!/bin/tcsh -f
#need to know absolute start-time, plot current time and best location in lat lon
#removed NEIC table lookup
#makecpt -Cjet -Qi -T-8/-5/1 -Z > amp2.cpt
makecpt -Cjet -Qi -T-8/-3/1 -Z -D > amp2.cpt
alias calc 'nawk "BEGIN{ print \!* }" '
alias roundint 'nawk "BEGIN{ print int( \!* ) + 1 }" '
alias truncint 'nawk "BEGIN{ print int( \!* ) }" '

# Calibrationvalues
set v30_A0 = -1.363541e+01
set v30_A1 =  1.280498e+00
set v60_A0 = -1.390322e+01
set v60_A1 = 1.336573e+00
set v100_A0 = -1.425351e+01
set v100_A1 = 1.343207e+00
set d100_A0 = -1.384989e+01
set d100_A1 = 1.358300e+00

set ANNOT_FONT_SECONDARY = Courier
set HEADER_FONT = Courier
set LABEL_FONT = Courier
set slice = 30
set minamp = 0.2
set minmag = 5.0
#create cpt file within script

# calculate absolute time of particular slice of current xyz file
# for test
set startdattimWaveforms = `head -2 $2 | tail -1`
set timeslice = `head -3 $1 | tail -1 | awk '{print $2}'`
echo startdattimWaveforms $startdattimWaveforms timeslice $timeslice
set t = `translatetime.pl $startdattimWaveforms $timeslice`
set date = $t[1]
set time = $t[2]
echo date= $date  time=$time

# calculate range of times in stacked magnitude time series
# need to read duration from o_timefile eventually
set hlinestor = `head -1 $1`
set headerlines = `head -1 $2`
set delay = `awk 'NR>(hl+1) {print $2}' hl=$headerlines $2 | head -1`
set t = `translatetime.pl $startdattimWaveforms $delay`
set startdattimStack = $t[3]
set enddelay = `tail -1 $2 | awk '{print $2}'`
set t = `translatetime.pl $startdattimWaveforms $enddelay`
set enddattimStack = $t[3]
set R1 = `translatetimeGMT.pl $startdattimStack`
set R2 = `translatetimeGMT.pl $enddattimStack`
echo $R1 $R2

# want annotated tick marks for time along trace
set hours = `calc ($enddelay - $delay)/(3600)`
set days = `calc ($enddelay - $delay)/86400`
set tothours = `truncint ($enddelay - $delay)/(3600)`
echo ticks are $hours $days
set trouhours = `roundint ($enddelay - $delay)/(3600*5)`
set troudays = `roundint ($enddelay - $delay)/86400`
set trunhours = `truncint ($enddelay - $delay)/(3600*5)`
set trundays = `truncint ($enddelay - $delay)/86400`
echo round are $trouhours $troudays
echo truncated are $trunhours $trundays
# assume here that the locator will not be run for time less than a few hours or more than a few days
# else the ticks will need to be updated accordingly
if ($trundays == "0") then
#need to have at least one day marked along entire trace
        echo days is zero
        set tickdays = 1D
	gmtset TIME_INTERVAL_FRACTION 0.05
else
#mark each separate day
        echo days is not zero
        set tickdays = 1D
endif
if ($trunhours == "0") then
        set tickhours =  15M
        set ftickhours =  5M
else
        set tickhours = "$trouhours"H
        set ftickhours = 1H
endif
echo ticks are $tickhours $tickdays
echo timeslice = $timeslice mamp = $minmag
set loc = `awk '( ($2<tm+1) && ($2>tm-1) ) && $8>= mamp {print $3,$4}' tm=$timeslice mamp=$minmag $2`
echo original = $loc
set locr = `awk '( ($2<tm+1) && ($2>tm-1) ) && $8>= mamp {printf "%6.1f %5.1f", $3,$4}' tm=$timeslice mamp=$minmag $2`
set lonr = $locr[1]
set latr = $locr[2]
echo latr = $latr  lonr = $lonr

@ thtor = $hlinestor + 1
echo thtor = $thtor
nearneighbor $1 -R-180/180/-90/90 -H$thtor -I1 -Ggrid.$timeslice.grd -S120k
psbasemap -JA120/0/4i -R0/360/-90/90 -B30 -P -K -X0.15 -Y7.00  >grid.$timeslice.ps
grdimage grid.$timeslice.grd -R -JA -Camp2.cpt -O -K >>grid.$timeslice.ps
gmtset GRID_PEN 0.3p/150/150/150
pscoast -A5000 -Dl -N1/1/255 -JA -R -Bg60/g30 -W1/255 -O -K >>grid.$timeslice.ps
gmtset GRID_PEN 0.1p
#plot location of maximum stacked amplitude if the amplitude is greater than boundary value
#print error message if not available
#column number 8 is magnitude, column 5 is stacked amplitude (as used in tor-file)
awk '( ($2<tm+1) && ($2>tm-1) ) && $8>= mamp {print $3,$4}' tm=$timeslice mamp=$minmag $2 | psxy -R -JA -Sc0.05 -G0/0/0       -V -O -K -W1/149/135/255 >> grid.$timeslice.ps
psbasemap -JA-60/0/4i -R0/360/-90/90  -B30 -O -K -X4.01  >>grid.$timeslice.ps
grdimage grid.$timeslice.grd -R -JA -Camp2.cpt -O -K >>grid.$timeslice.ps
gmtset GRID_PEN 0.3p/150/150/150
pscoast -A5000 -Dl -N1/1/255 -JA -R -W1/255 -Bg60/g30 -O -K  >>grid.$timeslice.ps
gmtset GRID_PEN 0.1p
awk '( ($2<tm+1) && ($2>tm-1) ) && $8>= mamp {print $3,$4}' tm=$timeslice mamp=$minmag $2 | psxy -R -JA -Sc0.05 -G0/0/0       -V -O -K -W1/149/135/255 >> grid.$timeslice.ps
echo "row 2"
psbasemap -JA0/89/4i -R0/360/-90/90  -B30 -O -K -X-4.01 -Y-4.01 >>grid.$timeslice.ps
grdimage grid.$timeslice.grd -R -JA -Camp2.cpt -O -K >>grid.$timeslice.ps
gmtset GRID_PEN 0.3p/150/150/150
pscoast -A5000 -Dl -N1/1/255 -JA -R -W1/255 -Bg60/g30 -O -K >>grid.$timeslice.ps
gmtset GRID_PEN 0.1p
awk '( ($2<tm+1) && ($2>tm-1) ) && $8>= mamp {print $3,$4}' tm=$timeslice mamp=$minmag $2 | psxy -R -JA -Sc0.05 -G0/0/0       -V -O -K -W1/149/135/255 >> grid.$timeslice.ps
psbasemap -JA0/-89/4i -R0/360/-90/90  -B30 -O -K -X4.01  >>grid.$timeslice.ps
grdimage grid.$timeslice.grd -R -JA -Camp2.cpt -O -K >>grid.$timeslice.ps
gmtset GRID_PEN 0.3p/150/150/150
pscoast -A5000 -Dl -N1/1/255 -JA -R -W1/255 -Bg60/g30 -O -K >>grid.$timeslice.ps
gmtset GRID_PEN 0.1p
awk '( ($2<tm+1) && ($2>tm-1) ) && $8>= mamp {print $3,$4}' tm=$timeslice mamp=$minmag $2 | psxy -R -JA -Sc0.05 -G0/0/0       -V -O -K -W1/149/135/255 >> grid.$timeslice.ps

set maxtime = `awk 'NR>(hl+1) {print $2/3600}' hl=$headerlines $2 | minmax -C | awk '{print $2}'`
set mintime = `awk 'NR>(hl+1) {print $2/3600}' hl=$headerlines $2 | minmax -C | awk '{print $1}'`
set maxamp = `awk 'NR>(hl+1) {print $8}' hl=$headerlines $2 | minmax -C | awk '{print $2}'`
set minamp = `awk 'NR>(hl+1) {print $8}' hl=$headerlines $2 | minmax -C | awk '{print $1}'`

set minamp = 5.0
set maxamp = 9.0

echo plotboundaries $mintime $maxtime $minamp $maxamp
gmtset ANNOT_FONT_PRIMARY = Palatino-Roman
gmtset ANNOT_FONT_SIZE_PRIMARY = 10p
gmtset ANNOT_FONT_SECONDARY = Palatino-Roman
gmtset ANNOT_FONT_SIZE_SECONDARY = 12p
gmtset LABEL_FONT = Palatino-Roman
gmtset LABEL_FONT_SIZE = 10p
gmtset PLOT_CLOCK_FORMAT hh:mm 
gmtset PLOT_DATE_FORMAT "o dd y"
psbasemap -R$R1/$R2/$minamp/$maxamp -JX6.75/2 -Bpa"$tickhours"f"$ftickhours"Sn -Bsa"$tickdays"S -O -K -V  -X-3.51 -Y-2.1 >> grid.$timeslice.ps 
#awk 'NR>(hl+1) {print $2/3600,$8}' hl=$headerlines $2 | psxy -R$mintime/$maxtime/$minamp/$maxamp -Ba1f1/f1a0.5g1:"Stacked Magnitude":WE -W3/0/0/205 -H1 -JX  -M -V -O -K >> grid.$timeslice.ps
awk '$5>=5.0{print $1,$5}' /home/polet/Locator/MagCalib/cat_upd.txt.gmt | psxy -R$R1/$R2/4.5/9.25 -Ba1f1/f0.2a1g1:"Magnitude":WE -Sc0.08i -W1/250/0/0 -JX -O -K -V >> grid.$timeslice.ps
nawk 'NR>(hl+1) {print $2/3600,(log($5)/log(10))/slope - interc/slope}' hl=$headerlines slope=$v60_A1 interc=$v60_A0 $2 | psxy -R$mintime/$maxtime/4.5/9.25 -W3/0/0/205 -JX  -M -H1  -V -O -K >> grid.$timeslice.ps
awk '$5>=5.0{print $1,$5}' /home/polet/Locator/MagCalib/cat_upd.txt.gmt | psxy -R$R1/$R2/4.5/9.25 -Sc0.08i -W1/250/0/0 -JX -O -K -V >> grid.$timeslice.ps

echo timeslice is $timeslice
set magnow = `awk '( ($2<tm+1) && ($2>tm-1) ){print (log($5)/log(10))/slope - interc/slope+0.2}' slope=$v60_A1 interc=$v60_A0 tm=$timeslice $2 `
set maground = `awk '( ($2<tm+1) && ($2>tm-1) ){printf "%3.1f", (log($5)/log(10))/slope - interc/slope}' slope=$v60_A1 interc=$v60_A0 tm=$timeslice $2 `
set timenow = `awk '( ($2<tm+1) && ($2>tm-1) ){print $2/3600}' tm=$timeslice $2 `
echo mag is $magnow maground is $maground
awk '( ($2<tm+1) && ($2>tm-1) ){print $2/3600,(log($5)/log(10))/slope - interc/slope+.1}' slope=$v60_A1 interc=$v60_A0 tm=$timeslice $2 | psxy -R$mintime/$maxtime/4.5/9.25 -JX -Si0.1 -G200/0/0 -W1/200/0/0 -V -O -K >> grid.$timeslice.ps
echo $timenow $magnow 12 0 9 BC $maground
pstext -N -R -JX -O -K << END >> grid.$timeslice.ps
$timenow $magnow 8 0 4 BC $maground
END

set tsl = `expr $timeslice + 0`

#1,1 is now at original origin, so 5,5 is in center of four spheres
pstext -R1/20/1/20 -Jx1/1 -O -X-0.5 -Y2.1 << END >> grid.$timeslice.ps
5. 5.2 12 0 9 CM $date $time
5. 5.0 12 0 9 CM M=$maground
4.2 4.8 12 0 9 CM lat:
#4.9 4.8 12 0 9 RM +88.8
4.9 4.8 12 0 9 RM $latr
5.2 4.8 12 0 9 CM lon:
#6.0 4.8 12 0 9 RM -188.8
6.0 4.8 12 0 9 RM $lonr
END

echo "convert to ppm"
#gs -sPAPERSIZE=legal -sDEVICE=ppmraw -r72 -q -dNOPAUSE -sOutputFile=grid.$tsl.ppm -- grid.$timeslice.ps
#pnmquant 256 grid.$tsl.ppm | ppmtogif  > grid.$tsl.gif

